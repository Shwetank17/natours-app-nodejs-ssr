doctype html

html
    
    head
        
        block head
        //- attributes are always enclosed in brackets 
        meta(charset="UTF-8")
        meta(name="viewport" content="width=device-width, initial-scale=1.0")
        
        //- Content Security Policy headers are used to specify what type of scripts, data, media etc we allow in our website. This prevents our website from malicious activites like XSS. There are different attributes of CSP like 'default-src', 'style-src', 'script-src' etc. Each attribute has space separated values and attribute ends with a semicolon.
        //- meta(http-equiv="Content-Security-Policy" 
        //- content="default-src 'self' data: gap: ws: ; 
        //- style-src 'self' 'unsafe-inline'; 
        //- script-src https: *.example.com ;
        //- media-src 'none'; 
        //- font-src *;
        //- connect-src *;
        //- img-src 'self' data: content:;")
        
        //-  base-uri /abc/; - limit to content in this folder  v2
        //- form-action ; - limit where forms can be sent  v2
        
        //- 'self' - anything from the same origin
        //- data: - data-uri (base64 images)
        //- gap: - phonegap and cordova used by plugins on iOS
        //- ws: - web sockets
        //- * - anything except data: and blobs
        //- filesystem: - access things on the local filesystem
        //- blob: - allow Binary Large OBjects
        //- mediastream: - allow streamed media
        //- content: - used by Cordova
        //- 'none' - prevent anything in the category
        //- https: - anything over https://
        //- *.example.com - anything from any subdomain of example.com
        //- 'unsafe-inline' - inline source elements like style attribute, onclick, or script tags 
        //- 'unsafe-eval' - allow javascript eval( ). 
        
        
        //- express will look for these assets in /public directory as we have specified this directory to be used to serve static files.Notice that href path starts with '/' to ensure that these assests are looked by express starting from the root path of the domain name.
        link(rel="stylesheet" href="/css/style.css")
        link(rel="shortcut icon" type="/image/png" href="/img/favicon.png")
        link(rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato:300,300i,700")
        title Natours | #{title}
        //- Like we use ${variableName} in template string in pug we use #{variableName}
        //- title Natours | #{tour}
        
    body
        //- Introductory notes
        //- this 'tour' variable is sent inside an object sent from the route that is rendering this template 
        //- h1= tour
        //- we can run normal javascript on these variables
        //- h2= user.toUpperCase()
        //- Buffered code is actually sent to the client with the template. Unbuffered code is not sent to client instead it is used for logical processing in the template. An unfbuffered code start with '-' without code as below
        //- - const x = 9; //- Unbuffered code
        //- h2= 2 * x //- Buffered code
        
        // HEADER 
        //- ('_header' is the child template of 'base' template)
        include _header 
        
        // CONTENT
        block content 
            h1 This is placeholder heading
        
        // FOOTER
        //- ('_footer' is the child template of 'base' template)
        include _footer
        
        script(src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js")
        script(src="/js/mapBox.js")
        script(src="/js/login.js")